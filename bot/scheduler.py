from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

class MonitoringScheduler:
    def __init__(self, bot, db, checker):
        self.bot = bot
        self.db = db
        self.checker = checker
        self.scheduler = AsyncIOScheduler()
        self.jobs = {}

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏"""
        self.scheduler.start()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∞–π—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        with self.db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM websites WHERE is_active = TRUE")
            websites = cursor.fetchall()

            for website in websites:
                self.add_website_to_monitor(website)

    def add_website_to_monitor(self, website):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–∞–π—Ç –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        job_id = f"website_{website['id']}"

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        job = self.scheduler.add_job(
            self.check_and_notify,
            trigger=IntervalTrigger(seconds=website['check_interval']),
            args=[website],
            id=job_id
        )

        self.jobs[website['id']] = job

    async def check_and_notify(self, website):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∞–π—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        result = await self.checker.check_website(website['url'])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        with self.db.get_connection() as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞ –∏–∑ –±–∞–∑—ã
            cursor.execute(
                "SELECT last_status FROM websites WHERE id = ?",
                (website['id'],)
            )
            current_status_row = cursor.fetchone()
            current_status = current_status_row['last_status'] if current_status_row else 'unknown'

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
            cursor.execute(
                "INSERT INTO check_results (website_id, status, status_code, response_time) VALUES (?, ?, ?, ?)",
                (website['id'], result['status'], result['status_code'], result['response_time'])
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞
            cursor.execute(
                "UPDATE websites SET last_status = ?, last_response_time = ? WHERE id = ?",
                (result['status'], result['response_time'], website['id'])
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
            if current_status != result['status']:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                message = self.format_notification(website, result, current_status)
                try:
                    await self.bot.send_message(website['user_id'], message)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

            conn.commit()

    def format_notification(self, website, result, previous_status):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if result['status'] == 'down':
            return (f"üî¥ –°–∞–π—Ç {website['url']} —Å—Ç–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n"
                    f"üìä –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {previous_status}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {result['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            return (f"üü¢ –°–∞–π—Ç {website['url']} —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!\n"
                    f"üìä –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {previous_status}\n"
                    f"‚ö° –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result['response_time']:.2f}–º—Å\n"
                    f"‚úÖ –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {result['status_code']}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {result['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}")