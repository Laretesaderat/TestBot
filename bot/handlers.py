from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot

router = Router()


class AddWebsite(StatesGroup):
    waiting_for_url = State()
    waiting_for_interval = State()


@router.message(Command("start"))
async def cmd_start(message: types.Message, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    db.add_user(message.from_user.id, message.chat.id)

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç"), KeyboardButton(text="–ú–æ–∏ —Å–∞–π—Ç—ã")],
            [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç"), KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–æ–≤!\n\n"
        "–Ø –º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç")
async def button_add_website(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç'"""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
    await state.set_state(AddWebsite.waiting_for_url)


@router.message(AddWebsite.waiting_for_url)
async def process_website_url(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ URL"""
    url = message.text.strip()

    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not url.startswith(('http://', 'https://')):
        url = 'https://' + url

    await state.update_data(url=url)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300):")
    await state.set_state(AddWebsite.waiting_for_interval)


@router.message(AddWebsite.waiting_for_interval)
async def process_website_interval(
        message: types.Message,
        state: FSMContext,
        db,  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∞
        scheduler  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∞
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    data = await state.get_data()
    url = data['url']

    try:
        interval = int(message.text) if message.text.strip() else 300
    except ValueError:
        interval = 300

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–π—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    website_id = db.add_website(message.from_user.id, url, interval)

    if website_id:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–π—Ç –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        website = {
            'id': website_id,
            'url': url,
            'user_id': message.from_user.id,
            'check_interval': interval
        }
        scheduler.add_website_to_monitor(website)

        await message.answer(f"‚úÖ –°–∞–π—Ç {url} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval} —Å–µ–∫—É–Ω–¥")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞")

    await state.clear()


@router.message(F.text == "–ú–æ–∏ —Å–∞–π—Ç—ã")
async def button_list_websites(message: types.Message, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ —Å–∞–π—Ç—ã'"""
    websites = db.get_user_websites(message.from_user.id)

    if not websites:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
        return

    text = "üìã –í–∞—à–∏ —Å–∞–π—Ç—ã:\n\n"
    for site in websites:
        status_emoji = "üü¢" if site['last_status'] == 'up' else "üî¥"
        text += f"{status_emoji} {site['url']} (–∫–∞–∂–¥—ã–µ {site['check_interval']} —Å–µ–∫.)\n"

    await message.answer(text)


@router.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def button_stats(message: types.Message, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    websites = db.get_user_websites(message.from_user.id)

    if not websites:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
        return

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    for site in websites:
        stats = db.get_website_stats(site['id'])
        if stats:
            uptime_percent = (stats['up_checks'] / stats['total_checks'] * 100) if stats['total_checks'] > 0 else 0
            text += f"üåê {site['url']}\n"
            text += f"   –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {uptime_percent:.1f}%\n"
            text += f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_response_time']:.2f}–º—Å\n"
            text += f"   –ü—Ä–æ–≤–µ—Ä–æ–∫: {stats['total_checks']}\n\n"

    await message.answer(text)


@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç")
async def button_delete_website(message: types.Message, db):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç'"""
    websites = db.get_user_websites(message.from_user.id)

    if not websites:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–∞–π—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–∞–π—Ç–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for site in websites:
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"‚ùå {site['url']}",
                callback_data=f"delete_{site['id']}"
            )
        ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("delete_"))
async def process_delete_website(callback: types.CallbackQuery, db):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞"""
    website_id = int(callback.data.split("_")[1])

    if db.delete_website(callback.from_user.id, website_id):
        await callback.message.answer("‚úÖ –°–∞–π—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∞–π—Ç–∞")

    await callback.answer()


@router.message()
async def handle_all_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")